#+TITLE: Config

* doom config

#+begin_src emacs-lisp

;; $DOOMDIR/config.el

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "suzumiya natsuhi"
      user-mail-address "ggwdwhu@gmail.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;

(setq doom-font (font-spec :family "Consolas" :size 18)
      doom-variable-pitch-font (font-spec :family "Noto Sans CJK SC Light" :size 18)
      doom-unicode-font (font-spec :family "Sarasa Term SC" :size 18)
      doom-big-font (font-spec :family "Sarasa Term SC Semiblold" :size 20))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)
(setq doom-theme 'tango)


;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Documents/org")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type nil)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.


;; logo
(setq fancy-splash-image "~/.doom.d/logo/Emacs-logo.svg")
;; (setq fancy-splash-image "~/.doom.d/logo/spacemacs-mega.png")
;; (setq fancy-splash-image "~/.doom.d/logo/mega-1.png")



#+end_src

* auto-save

#+begin_src emacs-lisp

;; TODO print saved buffer
(defun save-all ()
  (interactive)
  (message (concat  "Saving buffers at " (current-time-string)))
  (save-some-buffers t))
;; (remove-hook 'focus-out-hook #'save-all)
(cancel-function-timers #'save-all)
(run-with-idle-timer (* 10 60) 1 #'save-all)


#+end_src

* org

#+begin_src emacs-lisp

(use-package! org-refile)

;; org
(use-package! org
  :custom
  (org-log-done 'time)
  :init
  (progn
    (require 'org-protocol)
    (require 'org-refile)
    (setq org-agenda-files
          '("~/Documents/org/tasks.org"
            "~/Documents/org/todo.org"
            "~/Documents/org/birthdays.org"
            "~/Documents/org/dissertation.org"
            "~/Documents/org/gcal.org"
            "~/Documents/org/schedule.org"
            "~/Documents/org/books.org"
            "~/Documents/org/papers.org"
            "~/Documents/org/research.org"))

    (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 3))))

    (add-to-list 'org-capture-templates '("w" "Wangding"))
    (add-to-list 'org-capture-templates
                 '("wm" "Milestones" entry (file+headline "~/Documents/org/notes.org" "Milestones")
                   "* %u %^{heading} :milestone:\n%?\n" :prepend t))

    (add-to-list 'org-capture-templates
                 '("wt" "Personal todo" entry
                   (file+headline "~/Documents/org/tasks.org" "Inbox")
                   "* TODO %?\n%i\n%u\n%a" :prepend t))

    (add-to-list 'org-capture-templates
                 '("wn" "Personal notes" entry
                   (file+headline  "~/Documents/org/notes.org" "Inbox")
                   "* %u %? %^G\n%i\n%a" :prepend t))

    (add-to-list 'org-capture-templates
                 '("ws" "Code Snippet" entry (file "~/Documents/org/snippets.org")
                   ;; Prompt for tag and language
                   "* %?\t%^g\n\n#+BEGIN_SRC %^{language}\n\n\n#+END_SRC\n" :prepend t))

    ;; https://github.com/bastibe/org-journal
    (defun org-journal-find-location ()
      ;; Open today's journal, but specify a non-nil prefix argument in order to
      ;; inhibit inserting the heading; org-capture will insert the heading.
      (org-journal-new-entry t)
      ;; Position point on the journal's top-level heading so that org-capture
      ;; will add the new entry as a child entry.
      )
    (add-to-list 'org-capture-templates
                 '("wj" "Journal entry" plain (function org-journal-find-location)
                   "** %(format-time-string org-journal-time-format)%?"))


    (defun org-capture-template-goto-link ()
      (org-capture-put :target (list 'file+headline
                                     (nth 1 (org-capture-get :target))
                                     (org-capture-get :annotation)))
      (org-capture-put-target-region-and-position)
      (widen)
      (let ((hd (nth 2 (org-capture-get :target))))
        (goto-char (point-min))
        (if (re-search-forward
             (format org-complex-heading-regexp-format (regexp-quote hd)) nil t)
            (org-end-of-subtree)
          (goto-char (point-max))
          (or (bolp) (insert "\n"))
          (insert "* " hd "\n"))))
    (add-to-list 'org-capture-templates
                 '("p" "Protocol Annotation" plain
                   (file+function "~/Documents/org/web.org" org-capture-template-goto-link)
                   "  %U - %?\n\n  %:initial" :empty-lines 1))



    ))



(server-start)

;; org picture
(setq org-image-actual-width (/ (display-pixel-width) 4)) ;; 让图片显示的大小固定为屏幕宽度的三分之一

;; org archive file
(setq org-archive-location "~/Documents/org/archive.org::* From %s")


#+end_src

* org-protocol

#+begin_src emacs-lisp



#+end_src

* performance

#+begin_src emacs-lisp

;; delay when org-capture
(setq pdf-view-use-unicode-ligther nil)

#+end_src

* org-agenda

#+begin_src emacs-lisp

(eval-when-compile (require 'cl)) ;; fixing not lexical-let

(use-package org-agenda
  :defer t
  :init
  (setq org-agenda-files
        '("~/Documents/org/tasks.org"
          "~/Documents/org/todo.org"
          "~/Documents/org/birthdays.org"
          "~/Documents/org/dissertation.org"
          "~/Documents/org/gcal.org"
          "~/Documents/org/schedule.org"
          "~/Documents/org/books.org"
          "~/Documents/org/papers.org"
          "~/Documents/org/research.org"))
  :config
  (defun cmp-date-property (prop)
    "Compare two `org-mode' agenda entries, `A' and `B', by some date property.
     If a is before b, return -1. If a is after b, return 1. If they
     are equal return t."
    (eval-when-compile (require 'cl)) ;; fixing not lexical-let
    (lexical-let ((prop prop))
      #'(lambda (a b)
          (let* ((a-pos (get-text-property 0 'org-marker a))
                 (b-pos (get-text-property 0 'org-marker b))
                 (a-date (or (org-entry-get a-pos prop)
                             (format "<%s>" (org-read-date t nil "now"))))
                 (b-date (or (org-entry-get b-pos prop)
                             (format "<%s>" (org-read-date t nil "now"))))
                 (cmp (compare-strings a-date nil nil b-date nil nil))
                 )
            (if (eq cmp t) nil (signum cmp))
            )))
    )
  (org-super-agenda-mode)
  (mapc
   (lambda (value)
     (add-to-list
      'org-agenda-custom-commands value
      ;; nil (lambda (ele1 ele2)
      ;;       (equal (car ele1) (car ele2)))
      ))
   '(
     ("A" "Daily Agenda"
      ((agenda "" ((org-agenda-span 1)
                   (org-agenda-start-day nil)
                   (org-super-agenda-groups
                    `(
                      ;; Each group has an implicit boolean OR operator between its selectors.
                      (:name "Today"   ; Optionally specify section name
                       :time-grid t    ; Items that appear on the time grid
                       :todo "TODAY")  ; Items that have this TODO keyword
                      (:name "Important"
                       ;; Single arguments given alone
                       :priority>= "B")
                      (:name "Overdue"
                       :deadline past)
                      (:name "Due today"
                       :deadline today)
                      (:name "Long long ago"
                       ;; :auto-category t
                       :scheduled (before ,(org-read-date
                                            nil nil "-100d" nil
                                            (org-time-string-to-time (format-time-string "%Y-%m-%d"))))
                       :order 90)
                      (:name "Scheduled earlier"
                       :scheduled past)
                      (:name "Waiting..."
                       :todo "WAITING"
                       :order 98)
                      (:name "Todo"
                       :auto-category t
                       :todo "TODO")
                      ;; Set order of multiple groups at once
                      (:order-multi (2 (:name "Shopping in town"
                                        ;; Boolean AND group matches items that match all subgroups
                                        :and (:tag "shopping" :tag "@town"))
                                       (:name "Food-related"
                                        ;; Multiple args given in list with implicit OR
                                        :tag ("food" "dinner"))
                                       (:name "Personal"
                                        :habit t
                                        :tag "personal")
                                       (:name "Space-related (non-moon-or-planet-related)"
                                        ;; Regexps match case-insensitively on the entire entry
                                        :and (:regexp ("space" "NASA")
                                              ;; Boolean NOT also has implicit OR between selectors
                                              :not (:regexp "moon" :tag "planet")))))
                      ;; Groups supply their own section names when none are given
                      (:todo "WAITING" :order 8) ; Set order of this section
                      (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                       ;; Show this group at the end of the agenda (since it has the
                       ;; highest number). If you specified this group last, items
                       ;; with these todo keywords that e.g. have priority A would be
                       ;; displayed in that group instead, because items are grouped
                       ;; out in the order the groups are listed.
                       :order 9)
                      (:priority<= "B"
                       ;; Show this section after "Today" and "Important", because
                       ;; their order is unspecified, defaulting to 0. Sections
                       ;; are displayed lowest-number-first.
                       :order 1)
                      ;; After the last group, the agenda will display items that didn't
                      ;; match any of these groups, with the default order position of 99
                      ))))))
     ("W" "Weekly Review"
      ((agenda "" ((org-agenda-span 7))); review upcoming deadlines and appointments
                                        ; type "l" in the agenda to review logged items
       (stuck "") ; review stuck projects as designated by org-stuck-projects
       ;; (todo "PROJECT") ; review all projects (assuming you use todo keywords to designate projects)
       ;; (todo "MAYBE") ; review someday/maybe items
       (todo "WAIT"))) ; review waiting items
     ("g" . "GTD contexts")
     ("gc" "Computer" tags-todo "computer|linux|emacs"
      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
       (org-agenda-overriding-header "Unscheduled computer tasks")))
     ("ge" "Emacs" tags-todo "emacs"
      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
       (org-agenda-overriding-header "Unscheduled emacs tasks")))
     ("gh" "Home" tags-todo "home"
      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
       (org-agenda-overriding-header "Unscheduled home tasks")))
     ("gl" "Life" tags-todo "life"
      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
       (org-agenda-overriding-header "Unscheduled life tasks")))
     ("gp" "Photography" tags-todo "photography|photo"
      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
       (org-agenda-overriding-header "Unscheduled photography tasks")))
     ("gr" "Research" tags-todo "research"
      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'scheduled 'deadline))
       (org-agenda-overriding-header "Unscheduled research tasks")))
     ("d" "Upcoming deadlines" agenda ""
      ((org-agenda-entry-types '(:deadline))
       (org-agenda-span 14)
       (org-agenda-time-grid nil)))
     ("t" "Todo View"
      ((todo "" ((org-agenda-overriding-header "")
                 (org-super-agenda-groups
                  '((:name "Inbox"
                     :category "Inbox"
                     :order 2)
                    (:discard (:date t
                               :scheduled t
                               :deadline t)
                     :order 1)
                    (:name "Next"
                     :todo "NEXT"
                     :order 0)
                    (:auto-category t
                     :order 9)))))))
     ("r" . "Weekly review")
     ("rd" "Last day"
      ((tags "CLOSED>=\"<-1d>\"/DONE"
             ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo))
              (org-agenda-overriding-header "done last day")
              (org-agenda-cmp-user-defined (cmp-date-property
                                            "CLOSED"))
              (org-agenda-sorting-strategy '(user-defined-up))))))
     ("rw" "Last week"
      ((tags "TIMESTAMP_IA>=\"<-9d>\"+TIMESTAMP_IA<=\"<today>\"/DONE"
             ((org-agenda-overriding-header "Got inactive in the last week")))
       (tags "TIMESTAMP>=\"<-9d>\"+TIMESTAMP<=\"<today>\"/DONE"
             ((org-agenda-overriding-header "Happened in the last week")
              (org-agenda-files
               '("~/Documents/org/tasks.org"
                 "~/Documents/org/todo.org"
                 "~/Documents/org/birthdays.org"
                 "~/Documents/org/dissertation.org"
                 "~/Documents/org/gcal.org"
                 "~/Documents/org/schedule.org"
                 "~/Documents/org/books.org"
                 "~/Documents/org/papers.org"
                 "~/Documents/org/research.org"))))
       (tags "SCHEDULED>=\"<-9d>\"+SCHEDULED<=\"<today>\"/DONE"
             ((org-agenda-overriding-header "Scheduled and finished in the last week")
              (org-agenda-repeating-timestamp-show-all t)   ;; ensures that repeating events appear on all relevant dates
              ))
       (tags "SCHEDULED>=\"<-9d>\"+SCHEDULED<\"<today>\""
             ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
              (org-agenda-overriding-header "Scheduled but didn't finished in the last week")))))
     ("c" "Weekly schedule" agenda ""
      ((org-agenda-span 7)           ;; agenda will start in week view
       (org-agenda-repeating-timestamp-show-all t)   ;; ensures that repeating events appear on all relevant dates
       (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline 'scheduled))))
     )))

#+end_src

* blog

#+begin_src emacs-lisp



;; nikola
;; https://github.com/redguardtoo/org2nikola
(use-package! org2nikola
  :custom
  (org2nikola-output-root-directory "~/.config/nikola")
  (org2nikola-use-verbose-metadata t)
  (org2nikola-process-output-html-function
   (lambda (html-text title post-slug)
     (progn (let* ((re-str "\\/home\\/.+?\\.png"))
              (let* ((files-list (s-match-strings-all re-str html-text)))
                (dolist (file-path files-list) ;; TODO rewrite with mapconcat
                  ;; (message (format "file-path: %s" (car file-path)))
                  (setq cmd (format "cp %s ~/.config/nikola/images/" (car file-path)))
                  (message cmd)
                  (shell-command cmd))))
            (replace-regexp-in-string
             "file:.+?\\/[a-z0-9-]\\{34\\}\\/"
             "https://raw.githubusercontent.com/fpGHwd/fpghwd.github.io/master/images/"
             html-text))))
  :init
  (progn
    (add-hook 'org2nikola-after-hook (lambda (title slug)
                                       (let ((url (concat "https://fpghwd.github.io/posts/" slug "/index.html"))
                                             (cmd nil)
                                             (nikola-dir (file-truename "~/.config/nikola/"))
                                             (nikola-output-path (file-truename "~/.config/nikola/output")))
                                         ;; nikola is building posts ...
                                         ;; copy the blog url into kill-ring
                                         (kill-new url)
                                         (message "%s => kill-ring" url)
                                         (shell-command (format "cd %s && nikola build" nikola-dir))
                                         (setq cmd (format "cd %s && git add . && git commit -m 'updated' && git push origin master" nikola-output-path))
                                         ;; (message cmd)
                                         (shell-command cmd))))))

;; https://www.zmonster.me/2018/02/28/org-mode-capture.html
;; org publish project alist
;; writing blog
(require 'ox-publish)
(setq org-publish-project-alist
      '(
        ("org-wd"
         ;; Path to your org files.
         :base-directory "~/Documents/blog/org/"
         :base-extension "org"
         ;; Path to your Jekyll project.
         :publishing-directory "~/.config/nikola/posts/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :html-extension "html"
         :body-only t ;; Only export section between <body> </body>
         )
        ("org-static-wd"
         :base-directory "~/Documents/blog/static"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|php"
         :publishing-directory "~/.config/nikola/statics/"
         :recursive t
         :publishing-function org-publish-attachment
         )
        ("blog-wd" :components ("org-wd" "org-static-wd"))
        ))
;; 这里面存储的主要是目录转换逻辑

;; Write Blog
(setq post-dir "~/Documents/blog/org/")
(defun blog-post (title)
  (interactive "sEnter title: ")
  (let ((post-file (concat post-dir
                           (format-time-string "%Y-%m-%d")
                           "-"
                           title
                           ".org")))
    (progn
      (switch-to-buffer (find-file-noselect post-file))
      (insert (concat "\n#+startup: showall\n"
                      "#+options: toc:nil\n"
                      "#+begin_export html\n"
                      "---\n"
                      "layout     : post\n"
                      "title      : \n"
                      "categories : \n"
                      "tags       : \n"
                      "---\n"
                      "#+end_export\n"
                      "#+TOC: headlines 2\n"))))
  )
;; (define-key global-map "\C-cp" 'blog-post)

(defun publish-project (project no-cache)
  (interactive "sName of project: \nsNo-cache?[y/n] ")
  (if (or (string= no-cache "y")
          (string= no-cache "Y"))
      (setq org-publish-use-timestamps-flag nil))
  (org-publish-project project)
  (setq org-publish-use-timestamps-flag t))
;; (define-key global-map "\C-xp" 'publish-project)

#+end_src

#+RESULTS:
: org2nikola

* org-roam
#+begin_src emacs-lisp

(setq org-roam-directory "~/Documents/org/roam")


#+end_src

* org-download

#+begin_src emacs-lisp

#+end_src

* chinese-input

#+begin_src emacs-lisp

(use-package! rime
  :init
  (progn
    (require 'posframe)
    (require 'rime)
    ;; https://github.com/DogLooksGood/emacs-rime 候选框最后一项不显示
    (defun +rime--posframe-display-content-a (args)
      "给 `rime--posframe-display-content' 传入的字符串加一个全角空
格，以解决 `posframe' 偶尔吃字的问题。"
      (cl-destructuring-bind (content) args
        (let ((newresult (if (string-blank-p content)
                             content
                           (concat content "　"))))
          (list newresult))))

    (if (fboundp 'rime--posframe-display-content)
        (advice-add 'rime--posframe-display-content
                    :filter-args
                    #'+rime--posframe-display-content-a)
      (error "Function `rime--posframe-display-content' is not available."))
    )
  :custom
  (default-input-method "rime")
  (rime-user-data-dir "~/.doom.d/rime")
  (rime-posframe-properties (list :background-color "#333333"
                                  :foreground-color "#dcdccc"
                                  :font "Sarasa UI SC"))
  (rime-show-candidate 'posframe)
  (rime-disable-predicates '(rime-predicate-auto-english-p
                             ;; rime-predicate-space-after-cc-p
                             rime-predicate-current-uppercase-letter-p))
  ;;; support shift-l, shift-r, control-l, control-r
  (rime-inline-ascii-trigger 'shift-l))
;; temporary english predict
;; https://github.com/DogLooksGood/emacs-rime
;; (define-key rime-mode-map (kbd "M-j") 'rime-force-enable)


;; DONE rime-force-enable keybinding
;; https://github.com/DogLooksGood/emacs-rime
(evil-define-key* 'insert 'global (kbd "M-\\") #'rime-force-enable)


;; telega reply conflict with rime input "r"
(defun +pyim-probe-telega-msg ()
  "Return if current point is at a telega button."
  (s-contains? "telega" (symbol-name (get-text-property (point)
                                                        'category))))
(add-to-list 'rime-disable-predicates #'+pyim-probe-telega-msg)
;; (add-to-list 'pyim-english-input-switch-functions #'+pyim-probe-telega-msg)
#+end_src

* leetcode

#+begin_src emacs-lisp

 ;; leetcode
(use-package! leetcode
  :custom
  (leetcode-prefer-language "python")
  (leetcode-save-solutions t)
  (leetcode-directory "~/Documents/leetcode/"))

#+end_src

* deft

#+begin_src emacs-lisp

        ;; deft
(setq deft-directory "~/Documents/org/deft/")

#+end_src

* circadian

#+begin_src emacs-lisp

;; carcadian
;; https://github.com/guidoschmidt/circadian.el
;; (use-package! circadian
;;   :config
;;   (setq calendar-latitude 30.4)
;;   (setq calendar-longitude 114.9)
;;   (setq circadian-themes '((:sunrise . doom-one-light)
;;                            (:sunset  . doom-one)))
;;   (setq circadian-themes '((:sunrise . doom-solarized-light)
;;                            (:sunset  . doom-gruvbox-light)))
;;   (setq circadian-themes '((:sunrise . doom-gruvbox-light)
;;                            (:sunset  . doom-gruvbox-light)))
;;   (setq circadian-themes '((:sunrise . tango)
;;                            (:sunset  . doom-one)))
;;   (circadian-setup)
;;   )

#+end_src

* elfeed

#+begin_src emacs-lisp


;; rss
(use-package elfeed
  :defer t
  :config
  (setq rmh-elfeed-org-files (list (concat doom-private-dir"/elfeed.org")))
  (add-hook! 'elfeed-search-mode-hook 'elfeed-update)
  )



#+end_src


  #+BEGIN_SRC emacs-lisp
;; needed for setf to work with elfeed-entry-content
(eval-when-compile
  (cl-defstruct (elfeed-entry (:constructor elfeed-entry--create))
    "A single entry from a feed, normalized towards Atom."
    id title link date content content-type enclosures tags feed-id meta))
(use-package elfeed
  :defer t
  :commands (yang/elfeed-show-visit-gui
             yang/elfeed-search-browse-url-gui
             yang/elfeed-new-entry-parse
             elfeed-view-mpv
             elfeed-v-mpv)
  :general
  (:keymaps 'elfeed-show-mode-map
   "B" #'yang/elfeed-show-visit-gui
   :keymaps 'elfeed-search-mode-map
   "B" #'yang/elfeed-search-browse-url-gui
   "m" #'elfeed-toggle-star
   "v" #'elfeed-view-mpv)
  :init
  (setq-default elfeed-search-filter "@2-weeks-ago +unread -news")
  :config
  (elfeed-org)
  ;; do update every 1 hours
  (run-at-time nil (* 1 60 60) #'elfeed-update)
  (setq elfeed-search-filter "@2-weeks-ago +unread -news")

  (defun yang/elfeed-set-face ()
    (when (equal 'unspecified
                 (face-attribute 'elfeed-search-title-face :inherit))
      (set-face-attribute 'elfeed-search-title-face nil
                          :fontset "fontset-fixed"
                          :inherit 'fixed-pitch)
      (set-face-attribute 'elfeed-search-unread-title-face nil
                          :fontset "fontset-fixed"
                          :inherit 'fixed-pitch)))

  (add-hook 'elfeed-search-mode-hook #'yang/elfeed-set-face)

  (defun yang/elfeed-new-entry-parse (type xml entry)
    "Add author to ArXiv entries."
    ;; (message "entry is %s" entry)
    (setq yang/xml xml)
    (setq yang/entry entry)
    (let ((link (car (xml-query-all '(link *) xml)))
          (authors (car(xml-query-all '(creator *) xml)))
          updated-content)
      ;; (message "link is %s" link)
      ;; (message "authors is %s" authors)
      (when (and link
                 (s-contains? "arxiv.org" link))
        (setq updated-content (concat "<p>Authors: " authors "</p>
"
                                      (elfeed-entry-content entry)))
        ;; (message "updated-content is %s" updated-content)
        (setf (elfeed-entry-content entry)
              updated-content))))

  (add-hook 'elfeed-new-entry-parse-hook #'yang/elfeed-new-entry-parse)

  (defun yang/elfeed-show-visit-gui ()
    "Wrapper for elfeed-show-visit to use gui browser instead of eww"
    (interactive)
    (let ((browse-url-generic-program "/usr/bin/xdg-open"))
      (elfeed-show-visit t)))

  (defun yang/elfeed-search-browse-url-gui ()
    "Visit the current entry in your browser using `browse-url'.
    If there is a prefix argument, visit the current entry in the
    browser defined by `browse-url-generic-program'."
    (interactive)
    (let ((browse-url-generic-program "/usr/bin/xdg-open"))
      (elfeed-search-browse-url t)))

  (defalias 'elfeed-toggle-star
    (elfeed-expose #'elfeed-search-toggle-all 'star))

  (defun yang/elfeed-deduplicate ()
    "Remove duplicate of CS Theory and ArXiv."
    (interactive)
    (let ((old-filter elfeed-search-filter))
      (elfeed-search-set-filter "@2-weeks-ago -news +research")
      (save-excursion
        (goto-char (point-min))
        (let ((cs-theory-list))
          (while (re-search-forward (rx bol
                                        (repeat 4 digit) "-" (repeat 2 digit) "-" (repeat 2 digit) " "
                                        (group (one-or-more print))
                                        " ArXiv"
                                        (zero-or-more print)
                                        eol) nil t)
            (add-to-list 'cs-theory-list (buffer-substring-no-properties (match-beginning 1) (match-end 1))))
          (dolist (title cs-theory-list)
            (goto-char (point-min))
            (when (re-search-forward (rx bol
                                         (repeat 4 digit) "-" (repeat 2 digit) "-" (repeat 2 digit) " "
                                         (literal title)
                                         " CS Theory"
                                         (zero-or-more print)
                                         eol) nil t)
              (goto-char (match-beginning 0))
              (elfeed-search-tag-all 'duplicate)
              ;; elfeed-search-tag-all automatically move cursor to the next line
              (previous-line)
              (elfeed-search-untag-all 'unread)))))
      (elfeed-search-set-filter old-filter)))

  ;; the following from:
  ;; https://joshrollinswrites.com/help-desk-head-desk/20200611/
  (defun elfeed-v-mpv (url)
    "Watch a video from URL in MPV"
    (async-shell-command (format "mpv %s" url)))

  (defun elfeed-view-mpv (&optional use-generic-p)
    "Youtube-feed link"
    (interactive "P")
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
	             do (elfeed-untag entry 'unread)
	             when (elfeed-entry-link entry)
	             do (elfeed-v-mpv it))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line)))))

(use-package elfeed-org
  :defer t
  :after (org)
  :config
  ;; (message "org-directory is %s" org-directory)
  (setq rmh-elfeed-org-files (list "~/.doom.d/elfeed.org")))
  #+END_SRC

* telega

#+begin_src emacs-lisp

        ;; telega
;; https://github.com/zevlg/telega.el
(use-package! telega
  :commands (telega)
  :defer t
  :custom
  ;; (telega-notifications-mode 1)
  (telega-proxies (list
                   '(:server "127.0.0.1" :port 1080 :enable t
                     :type (:@type "proxyTypeSocks5")))))


;; telega font
(when (member "Sarasa Mono SC" (font-family-list))
  (make-face 'telega-align-by-sarasa)
  (set-face-font 'telega-align-by-sarasa (font-spec :family "Sarasa Mono SC"))
  (add-hook! '(telega-chat-mode-hook telega-root-mode-hook)
    (buffer-face-set 'telega-align-by-sarasa)))



#+end_src

* nyan

#+begin_src emacs-lisp


;; nyan-mode
(nyan-mode 1)
(nyan-start-animation)
;; (nyan-toggle-wavy-trail)
;; (nyan-start-music)



#+end_src

* org-journal

#+begin_src emacs-lisp


;; org-journal
;; (setq org-journal-dir "~/Documents/org/journal/"
;;       org-journal-date-format "%A, %d %B %Y"
;;       org-journal-file-type 'monthly)


#+end_src

* map
#+begin_src emacs-lisp

;; map!
;; https://emacs-china.org/t/topic/5089
(map!
 :leader
 :desc "youdao-dictionary-search-from-input" "y" #'youdao-dictionary-search-from-input
 )


#+end_src

* latex

#+begin_src emacs-lisp


;; latex
                                        ; https://emacs-china.org/t/emacs-latex/12658/4
;; (setq latex-run-command "xelatex")
;; (setq TeX-global-PDF-mode t TeX-engine 'xetex)
;; (setq TeX-command-default "XeLaTeX")


#+end_src

* tabnine

#+begin_src emacs-lisp

        ;; tabnine
;; https://github.com/TommyX12/company-tabnine
;; (use-package! company-tabnine
;;   :init
;;   (add-to-list 'company-backends 'company-tabnine))
;; (add-to-list 'company-backends 'company-tabnine)
;; TODO https://emacs-china.org/t/tabnine/9988/39
;; (defun company//sort-by-tabnine (candidates)
;;   (if (or (functionp company-backend)
;;           (not (and (listp company-backend) (memq 'company-tabnine company-backend))))
;;       candidates
;;     (let ((candidates-table (make-hash-table :test #'equal))
;;           candidates-1
;;           candidates-2)
;;       (dolist (candidate candidates)
;;         (if (eq (get-text-property 0 'company-backend candidate)
;;                 'company-tabnine)
;;             (unless (gethash candidate candidates-table)
;;               (push candidate candidates-2))
;;           (push candidate candidates-1)
;;           (puthash candidate t candidates-table)))
;;       (setq candidates-1 (nreverse candidates-1))
;;       (setq candidates-2 (nreverse candidates-2))
;;       (nconc (seq-take candidates-1 2)
;;              (seq-take candidates-2 2)
;;              (seq-drop candidates-1 2)
;;              (seq-drop candidates-2 2)))))

;; (add-to-list 'company-transformers 'company//sort-by-tabnine t)
;; `:separate`  使得不同 backend 分开排序
;; (add-to-list 'company-backends '(company-lsp :with company-tabnine :separate))

;; The free version of TabNine is good enough,
;; and below code is recommended that TabNine not always
;; prompt me to purchase a paid version in a large project.
;; (defadvice company-echo-show (around disable-tabnine-upgrade-message activate)
;;   (let ((company-message-func (ad-get-arg 0)))
;;     (when (and company-message-func
;;                (stringp (funcall company-message-func)))
;;       (unless (string-match "The free version of TabNine only indexes up to" (funcall company-message-func))
;;         ad-do-it))))


#+end_src

* UI

** font

#+begin_src emacs-lisp

;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Hooks.html
;; (add-hook! 'emacs-startup-hook #'toggle-frame-fullscreen #'+workspace/restore-last-session)
;; (add-hook! 'emacs-startup-hook #'toggle-frame-fullscreen)



(when (member "Noto Color Emoji" (font-family-list))
  (set-fontset-font 't 'symbol
                    (font-spec :family "Noto Color Emoji")
                    nil 'prepend))


#+end_src


** Disable tool-bar and menu-bar

#+begin_src emacs-lisp

(when (version< emacs-version "27.0")
  (when tool-bar-mode
    (tool-bar-mode -1))
  (when menu-bar-mode
    (menu-bar-mode -1)))

#+end_src

** italic
#+begin_src emacs-lisp

;; italic when comment and keyword
;; https://www.reddit.com/r/emacs/comments/f531pt/doom_wherehow_to_change_syntax_highlighting/
(custom-set-faces! '(font-lock-comment-face :slant italic) '(font-lock-keyword-face :slant italic))

#+end_src

* luna

#+begin_src emacs-lisp


;; lunar
;; https://emacs-china.org/t/topic/2119/13
;; (defun my--diary-chinese-anniversary (lunar-month lunar-day &optional year mark)
;;   (if year
;;       (let* ((d-date (diary-make-date lunar-month lunar-day year))
;;              (a-date (calendar-absolute-from-gregorian d-date))
;;              (c-date (calendar-chinese-from-absolute a-date))
;;              (cycle (car c-date))
;;              (yy (cadr c-date))
;;              (y (+ (* 100 cycle) yy)))
;;         (diary-chinese-anniversary lunar-month lunar-day y mark))
;;     (diary-chinese-anniversary lunar-month lunar-day year mark)))


#+end_src

* rainbow-fat

#+begin_src emacs-lisp

;; (use-package! rainbow-fart
;;   :hook (prog-mode . rainbow-fart-mode)
;;   :custom
;;   (rainbow-fart-voice-model "JustKowalski")
;;   (rainbow-fart-keyword-interval (* 1 10)))
;; https://github.com/lujun9972/emacs-rainbow-fart


#+end_src

* wucuo

#+begin_src emacs-lisp

(add-hook 'prog-mode-hook #'wucuo-start)
(add-hook 'text-mode-hook #'wucuo-start)

#+end_src

* podcaster

#+begin_src emacs-lisp

;;podcaster
;; https://github.com/lujun9972/podcaster
(use-package! podcaster
  :custom
  (podcaster-feeds-urls '(
                          "http://voice.beartalking.com/rss"
                          "https://feed.podbean.com/speakmylanguage/feed.xml"
                          "http://feed.thisamericanlife.org/talpodcast"
                          "https://fs.blog/knowledge-project/feed/"
                          "https://jamesaltucher.com/podcasts/feed/"
                          "https://adhk.me/episodes/feed.xml"
                          "https://anchor.fm/s/2ad39814/podcast/rss"
                          "https://zhiyi.life/episodes/feed.xml"
                          )))
;; https://www.douban.com/note/763676277/

#+end_src

* credentials

#+begin_src emacs-lisp

;; anki vocabulary capture failed
;; (use-package! anki-editor)
;; (use-package! anki-connect)


;; load credential part
(load! "~/.doom.d/credentials.el" 'noerror)

;; shengci
;;(use-package! shengci)
;;(setq shengci-cache-word-dir-path "~/Documents/shengci/")
;;(setq shengci-cache-word-file-path "~/Documents/shengci/")

;; evernote
(use-package! evernote-mode)


#+end_src

* valign

#+begin_src emacs-lisp

(use-package! valign
  :defer t
  :commands (valign-table valign-mode)
  :hook (org-mode . valign-mode))


#+end_src

* ispell

#+begin_src emacs-lisp

(after! ispell
  (setq ispell-extra-args '("--sug-mode=ultra")
        ispell-dictionary "american"
        ispell-personal-dictionary nil)) ;; set ispell-personal-dictionary for I have no ispell-personal-dictionary

#+end_src

* Python

#+BEGIN_SRC emacs-lisp

(use-package company-jedi             ;;; company-mode completion back-end for Python JEDI
  :defer t
  :config
  (add-hook 'python-mode-hook 'jedi:setup)
  (setq jedi:complete-on-dot t)
  (setq jedi:use-shortcuts t)
  (defun config/enable-company-jedi ()
    (add-to-list 'company-backends 'company-jedi))
  (add-hook 'python-mode-hook 'config/enable-company-jedi))

(use-package lsp-mode
  :hook (python-mode . lsp)
  :commands lsp)

(use-package python
  :commands yang/python-setup
  :init
  (add-hook 'python-mode-hook #'yang/python-setup)
  :config
  (setq-default python-indent 4)
  ;; bug fix for python-mode
  (setq python-shell-native-complete nil)
  (defun yang/python-setup ()
    (set (make-local-variable 'company-idle-delay) 0.2)))


;; optionally
(use-package lsp-ui
  :commands lsp-ui-mode)
(use-package company-lsp :commands company-lsp)
(use-package helm-lsp :commands helm-lsp-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
;; optionally if you want to use debugger
;; (use-package dap-mode)
;; (use-package dap-LANGUAGE) to load the dap adapter for your language
  #+END_SRC

#+END_SRC

* imenu

#+begin_src emacs-lisp

(after! imenu
  (setq imenu-auto-rescan t))

(use-package! imenu-list
  :commands (imenu-list-smart-toggle)
  :config
  (imenu-list-minor-mode))

#+end_src

* org-roam

#+BEGIN_SRC emacs-lisp

;; This is only a workaround
(setq org-roam-directory (concat org-directory "/roam")
     org-roam-db-location "/tmp/org-roam.db")

(use-package org-roam-capture
  :defer t
  :config
  (setq org-roam-capture-ref-templates
        '(("r" "ref" plain
           #'org-roam-capture--get-point "%?"
           :file-name "${slug}"
           :head "#+title: ${title}\n#+roam_key: ${ref}\n[[${ref}][${title}]]\n"
           :unnarrowed t))
        org-roam-capture-templates
        '(("d" "default" plain #'org-roam-capture--get-point "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}" :head "#+title: ${title}\n#+roam_tags:" :unnarrowed t))))

#+END_SRC

* org-alert

#+begin_src emacs-lisp

(use-package! org-alert
  :config
  (setq alert-default-style 'libnotify)
  (setq org-alert-interval 300)
  (org-alert-enable))

#+end_src

* performance

#+begin_src emacs-lisp

;; garbage
(setq gc-cons-threshold most-positive-fixnum)
(add-hook 'focus-out-hook #'garbage-collect)
(add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold (* 50 1024 1024))))

;; not use when you know it's for speed when emacs start
(eval-and-compile
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)
  (setq use-package-expand-minimally t)
  (setq use-package-enable-imenu-support t))


#+end_src

* quick-mathlive

https://github.com/casouri/quick-mathlive

#+begin_src emacs-lisp

        (add-load-path! "~/Projects/quick-mathlive")
        (require 'quick-mathlive)

#+end_src


* org link open

#+begin_src emacs-lisp

(use-package! org
  :init
  (setq org-file-apps
        '((auto-mode . emacs)
          (directory . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.pdf\\'" . "okular \"%s\"")
          ("\\.docx\\'" . "libreoffice \"%s\"")
          ("\\.doc\\'" . "libreoffice \"%s\"")
          ("\\.pdf::\\([0-9]+\\)\\\\='" . "okular -p %1 %s"))
        ))


#+end_src

* mu4e

#+begin_src emacs-lisp



#+end_src



* Email
** General
   #+begin_src emacs-lisp
     (setq mail-interactive t)

     ;; send mail using mail
     (setq send-mail-function 'sendmail-send-it)
     (setq message-send-mail-function 'message-send-mail-with-sendmail)


     (setq message-signature
           "Wang Ding(王鼎), Master student
     Computer Science Department
     Wuhan University
     E-mail: ggwdwhu@gmail.com")

     (add-hook 'message-mode-hook
               (lambda ()
                 (auto-fill-mode -1)))

   #+end_src

** COMMENT Mu4e
   #+BEGIN_SRC emacs-lisp
     (use-package mu4e
       :defer t
       :commands htmlize-and-send
       :init
       :config
       (add-hook 'org-ctrl-c-ctrl-c-hook 'htmlize-and-send t)
       ;; fix C-h
       (evil-define-key 'evilified mu4e-view-mode-map (kbd "C-h") nil)
       (add-hook 'mu4e-headers-mode-hook
                 (lambda ()
                   (pangu-spacing-mode -1)))

       ;; Call EWW to display HTML messages
       (defun jcs-view-in-eww (msg)
         (eww-browse-url (concat "file://" (mu4e~write-body-to-html msg))))

       ;; Arrange to view messages in either the default browser or EWW
       ;; (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
       (add-to-list 'mu4e-view-actions '("Eww view" . jcs-view-in-eww) t)

       ;;rename files when moving
       ;;NEEDED FOR MBSYNC
       (setq mu4e-change-filenames-when-moving t)

       ;; Try to show images
       (setq mu4e-view-show-images t
             mu4e-show-images t
             mu4e-view-image-max-width 800
             mu4e-view-prefer-html t)
       ;; the next are relative to `mu4e-maildir'
       ;; instead of strings, they can be functions too, see
       ;; their docstring or the chapter 'Dynamic folders'
       (setq mu4e-sent-folder   "/gmail/[Gmail]/已发邮件"
             mu4e-drafts-folder "/gmail/[Gmail]/草稿"
             mu4e-trash-folder  "/gmail/[Gmail]/已删除邮件"
             mu4e-update-interval 300)

       (setq mu4e-headers-fields
           '( (:human-date          .  20)    ;; alternatively, use :human-date
              (:flags         .   6)
              (:from          .  22)
              (:subject       .  nil))) ;; alternatively, use :thread-subject

       (setq mu4e-get-mail-command "mbsync gmail")

       (setq mu4e-compose-signature
             "Ding Wang(王鼎)
     Master student
     Computer Science Department
     Wuhan University
     E-mail: ggwdwhu@gmail.com")
     ;;   (setq mu4e-compose-signature
     ;;         "<#part type=text/html>
     ;; <html>
     ;; <body>
     ;; <p><strong>Sheng Yang(杨圣)</strong</p>
     ;; <p>PhD student</p>
     ;; <p>Computer Science Department</p>
     ;; <p>University of Maryland, College Park</p>
     ;; <p>E-mail: <a href=\"mailto:yangsheng6810@gmail.com\">yangsheng6810@gmail.com</a></p>
     ;; </body>
     ;; </html>
     ;; <#/part>")

       ;; ;; make thread into one page
       ;; (use-package mu4e-conversation)



       ;; save multiple attachments without asking
       (setq mu4e-save-multiple-attachments-without-asking t)

       ;; use single window
       (setq mu4e-split-view 'single-window)

       (defun mu4e-view-toggle-addresses ()
         (interactive)
         (when (not (local-variable-p mu4e-view-show-addresses))
           (make-local-variable 'mu4e-view-show-addresses)
           (let ((temp mu4e-view-show-addresses))
             (setq mu4e-view-show-addresses temp)))
         (setq mu4e-view-show-addresses (null mu4e-view-show-addresses))
         (mu4e-view-refresh))

       ;; send email using org-mode to form html
       (defun htmlize-and-send ()
         "When in an org-mu4e-compose-org-mode message, htmlize and send it."
         (interactive)
         (when (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
           (org-mime-htmlize)
           (message-send-and-exit)))

       (setq mu4e-headers-include-related nil))

(use-package mu4e-alert
  :defer t
  :after mu4e
  :config
  ;; notification using mu4e-alert
  (mu4e-alert-set-default-style 'libnotify))
   #+END_SRC

** notmuch by doom
#+begin_src emacs-lisp
  ;; FIXME This module is a WIP!

  (defvar +notmuch-sync-backend 'offlineimap
    "Which backend to use. Can be either gmi, mbsync, offlineimap or nil (manual).")

  ;; (defvar +notmuch-mail-folder "~/.mail/account.gmail"
  ;;   "Where your email folder is located (for use with gmailieer).")


(after! notmuch
  (set-company-backend! 'notmuch-message-mode
    '(notmuch-company :with company-ispell company-yasnippet))

  (set-popup-rule! "^\\*notmuch-hello" :side 'left :size 30 :ttl 0)

  ;; (setq notmuch-fcc-dirs nil
  ;;       notmuch-show-logo nil
  ;;       notmuch-message-headers-visible nil
  ;;       message-kill-buffer-on-exit t
  ;;       message-send-mail-function 'message-send-mail-with-sendmail
  ;;       notmuch-search-oldest-first nil
  ;;       send-mail-function 'sendmail-send-it
  ;;       ;; sendmail-program "/usr/local/bin/msmtp"
  ;;       notmuch-search-result-format
  ;;       '(("date" . "%12s ")
  ;;         ("count" . "%-7s ")
  ;;         ("authors" . "%-30s ")
  ;;         ("subject" . "%-72s ")
  ;;         ("tags" . "(%s)"))
  ;;       notmuch-tag-formats
  ;;       '(("unread" (propertize tag 'face 'notmuch-tag-unread)))
  ;;       notmuch-hello-sections
  ;;       '(notmuch-hello-insert-saved-searches
  ;;         notmuch-hello-insert-alltags)
  ;;       notmuch-saved-searches
  ;;       '((:name "inbox"   :query "tag:inbox not tag:trash" :key "i")
  ;;         (:name "flagged" :query "tag:flagged"             :key "f")
  ;;         (:name "sent"    :query "tag:sent"                :key "s")
  ;;         (:name "drafts"  :query "tag:draft"               :key "d"))
  ;;       notmuch-archive-tags '("-inbox" "-unread"))

  ;; (setq-hook! 'notmuch-show-mode-hook line-spacing 0)

  (add-hook 'doom-real-buffer-functions #'notmuch-interesting-buffer)

  ;; (advice-add #'notmuch-start-notmuch-sentinel :around #'+notmuch-dont-confirm-on-kill-process-a)

  ;; modeline doesn't have much use in these modes
  (add-hook! '(notmuch-show-mode-hook
               notmuch-tree-mode-hook
               notmuch-search-mode-hook)
             #'hide-mode-line-mode))
#+end_src

** notmuch
   #+BEGIN_SRC emacs-lisp
     (after! org
       (condition-case err
           (require 'org-notmuch)
         (error (progn
                  (message "Require of org-notmuch failed as expected.")
                  (require 'ol-notmuch)))))
     (use-package notmuch
       :defer t
       :general
       (:keymaps 'notmuch-show-mode-map
                 "d" (lambda ()
                       "toggle deleted tag for message"
                       (interactive)
                       (if (member "trash" (notmuch-show-get-tags))
                           (notmuch-show-tag (list "-trash"))
                         (notmuch-show-tag (list "+trash")))))
       (:keymaps 'notmuch-show-mode-map
         :states '(normal)
         "R" #'notmuch-show-reply
         "r" #'notmuch-show-reply-sender
         "m" #'notmuch-mua-new-mail
         "v" nil)
       :config
       (setq notmuch-search-oldest-first nil)
       (setq notmuch-fcc-dirs '((".*" . "sent -inbox +sent -unread")))
       (setq notmuch-message-deleted-tags '("+trash" "-inbox" "-unread"))
       (setq notmuch-always-prompt-for-sender t
             notmuch-identities
             '("ggwdwhu@gmail.com"
               "wangding@whu.edu.cn"
               "mswdwhu@outlook.com"
               "284320213@qq.com")
             notmuch-saved-searches
             '((:name "inbox" :query "tag:inbox" :key "i")
               (:name "flagged" :query "tag:flagged" :key "f")
               (:name "sent" :query "tag:sent" :key "s")
               (:name "drafts" :query "tag:draft" :key "d")
               (:name "all mail" :query "*" :key "a")
               (:name "unread" :query "tag:inbox and tag:unread" :key "u")
               (:name "unread lists" :query "tag:lists and tag:unread" :key "l" :count-query "100")
               (:name "today" :query "date:today and tag:inbox and not tag:trash and not tag:as_record" :key "t")
               (:name "last 24h" :query "date:24h.. and tag:inbox and not tag:trash and not tag:as_record" :key "T")))

       (add-hook 'notmuch-mua-send-hook #'notmuch-mua-attachment-check)

       ;;   ;; Fix notmuch-describe-key for evil and spacemacs
       ;;   (defun notmuch-describe-key (actual-key binding prefix ua-keys tail)
       ;;     "Prepend cons cells describing prefix-arg ACTUAL-KEY and ACTUAL-KEY to TAIL

       ;; It does not prepend if ACTUAL-KEY is already listed in TAIL."
       ;;     (let ((key-string (concat prefix (key-description actual-key))))
       ;;       ;; We don't include documentation if the key-binding is
       ;;       ;; over-ridden. Note, over-riding a binding automatically hides the
       ;;       ;; prefixed version too.
       ;;       (unless (assoc key-string tail)
       ;;         (when (and ua-keys (symbolp binding)
       ;;                    (get binding 'notmuch-prefix-doc))
       ;;           ;; Documentation for prefixed command
       ;;           (let ((ua-desc (key-description ua-keys)))
       ;;             (push (cons (concat ua-desc " " prefix (format-kbd-macro actual-key))
       ;;                         (get binding 'notmuch-prefix-doc))
       ;;                   tail)))
       ;;         ;; Documentation for command
       ;;         (push (cons key-string
       ;;                     (or (and (symbolp binding) (get binding 'notmuch-doc))
       ;;                         (and (functionp binding) (notmuch-documentation-first-line binding))))
       ;;               tail)))
       ;;     tail)

       (defun notmuch-show-exports-all-attachments (mm-handle directory)
         (let (attachments)
           (notmuch-foreach-mime-part
            (lambda (p)
              (let ((disposition (mm-handle-disposition p))
                    filename
                    cid
                    file-location)
                ;; (message "handle is: %S" p)
                ;; (message "disposition is: %S" disposition)
                ;; (message "mm-handle-id is: %S" (mm-handle-id p))
                (and (listp disposition)
                     (string-equal "text/html" (mm-handle-media-type p))
                     (progn
                       (message "handle inside is: %S" p)
                       t)
                     (mm-insert-part p)
                     (set-buffer-file-coding-system 'raw-text))
                (and (listp disposition)
                     ;; (message "p is: %S" p)
                     (or (equal (car disposition) "attachment")
                         (and (equal (car disposition) "inline")
                              (assq 'filename disposition))
                         ;; (mm-handle-id p)
                         )
                     (progn
                       (setq filename (mm-handle-filename p))
                       (if (null filename)
                           (message "filename is null, handle is %S" p))
                       (setq cid (mm-handle-id p))
                       (setq cid (s-chop-suffix ">" (s-chop-prefix "<" cid)))
                       ;; (message "adding: (%S, %S)" cid filename)
                       (add-to-list 'attachments (cons cid filename))
                       ;; (message "added: %S" disposition)
                       ;; (message "filename: %S" (cdadr disposition))
                       (setq file-location (concat directory
                                                   filename))
                       (mm-save-part-to-file p file-location)
                       (message "Saved file %s" file-location)
                       (lexical-let ((file-name file-location))
                         (run-at-time 2 nil
                                      (lambda ()
                                        (ignore-errors (delete-file file-name)))))))))
            mm-handle)
           attachments))

       (defun notmuch-make-temp-file (ext)
         "Create a temporary file with extension EXT. The file will
               self-destruct in a few seconds, enough to open it in another
               program."
         (let ((tmpfile (make-temp-file
                         "notmuch-" nil (concat "." ext))))
           (lexical-let ((filename tmpfile))
             (run-at-time "30 sec" nil
                          (lambda () (ignore-errors (delete-file filename)))))
           tmpfile))

       (defun notmuch-show-reopen-in-browser ()
         "Write the text/html to a temporary file and open it."
         (interactive)
         (with-current-notmuch-show-message
          (let ((mm-handle (mm-dissect-buffer))
                (tmpfile (notmuch-make-temp-file "html"))
                html
                txt
                ;; (html (mu4e-message-field msg :body-html))
                ;; (txt (mu4e-message-field msg :body-txt))
                attachments)
            (with-temp-buffer
              (insert "<head><meta charset=\"UTF-8\"></head>\n")
              (setq attachments
                    (notmuch-show-exports-all-attachments
                     mm-handle temporary-file-directory))
              (message "temp-directory is: %s" temporary-file-directory)
              (write-file tmpfile nil)
              ;; (message "attachments: %S" attachments)
              ;; rewrite attachment urls
              (mapc (lambda (attachment)
                      (goto-char (point-min))
                      (while (re-search-forward (format "src=\"cid:%s\""
                                                        (car attachment)) nil t)
                        (replace-match (format "src=\"%s%s\"" temporary-file-directory
                                               (cdr attachment)))))
                    attachments)
              (save-buffer)
              (browse-url tmpfile)))))

       (setq-default notmuch-refresh-timer nil)

       (defun notmuch-refresh-func ()
         (when (null notmuch-refresh-timer)
           (setq notmuch-refresh-timer
                 (run-at-time
                  10 nil
                  (lambda ()
                    (message "mail-sync.py called")
                    (setq notmuch-refresh-timer nil)
                    (start-process "mail-sync" "*mail-sync*" "mail-sync.py" "--do-gmi"))))))

       ;; sync gmi after tagging
       ;; (add-hook 'notmuch-after-tag-hook #'notmuch-refresh-func))

     (after! org-mime
       ;; fix org-mime-htmlize with latex
       (setq org-mime-export-options '(:with-latex dvipng)))
   #+END_SRC

** Sending
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist
                  '("\\.eml\\'" . (lambda ()
                                    ;; will add something special
                                    (markdown-mode))))
     (use-package markdown-mode
       :mode "\\.eml\\'"
       :defer t
       :general
       (:keymaps
        'markdown-mode-map
        :states '(normal insert motion visual)
        "M-h" nil
        "M-j" nil
        "M-k" nil
        "M-l" nil
        "M-H" nil
        "M-J" nil
        "M-K" nil
        "M-L" nil))
   #+END_SRC


* pyenv

#+begin_src emacs-lisp

        (use-package pyenv-mode
          :init
          (pyenv-mode-set "3.8.5"))

#+end_src

* Default use eww for browsing
   #+BEGIN_SRC emacs-lisp
(after! browse-url
  (setq browse-url-browser-function
        ;; use eww only when from elfeed-mode
        (lambda (URL &rest args)
          (if (string= major-mode "elfeed-search-mode")
              (eww-browse-url URL args)
            (browse-url-default-browser URL args)))))

(use-package eww
  :commands (browse-url-default-browser
             yang/eww-reopen-url-gui)
  :general
  (:keymaps
   'eww-mode-map
   "B" #'yang/eww-reopen-url-gui)
  :config
  ;; open with GUI browser
  (defun yang/eww-reopen-url-gui ()
    "Open current url in GUI browser"
    (interactive)
    (let ((browse-url-generic-program "/usr/bin/xdg-open"))
      (browse-url-generic (eww-copy-page-url)))))
   #+END_SRC


* Shell
** Eshell
   #+BEGIN_SRC emacs-lisp
(after! eshell
  (setq eshell-cmpl-cycle-completions nil)
  ;; Nicer completion for eshell
  ;; From https://emacs.stackexchange.com/a/27871
  ;; Also we have to put it into shell, because eshell resets eshell-mode-map
  ;; when initialized
  (add-hook 'eshell-mode-hook
            (lambda ()
              ;; some alias
              (eshell/alias "ee" "find-file $1")
              (eshell/alias "ff" "find-file $1")
              (eshell/alias "d" "dired $1")
              ;; git status
              (defun eshell/gst (&rest args)
                (magit-status (pop args) nil)
                (eshell/echo)) ;; The echo command suppresses output
              ;; define clear
              (defun eshell/clear ()
                "Clear the eshell buffer."
                (let ((inhibit-read-only t))
                  (erase-buffer)
                  (eshell-send-input)))
              (define-key eshell-mode-map (kbd "<tab>")
                (lambda () (interactive) (pcomplete-std-complete))))))
   #+END_SRC

** multi-term
   #+BEGIN_SRC emacs-lisp
(use-package eterm-256color
  :defer t
  :init
  (add-hook 'term-mode-hook #'eterm-256color-mode)
  (setq term-buffer-maximum-size 10000)
  :general
  (:keymaps
   'term-raw-map
   :states '(normal insert)
   "<mouse-2>" #'term-mouse-paste
   "C-a" #'term-send-home
   "C-e" #'term-send-end))
   #+END_SRC

** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :defer t
    :init
    (setq vterm-term-environment-variable "eterm-color"
          vterm-shell "/usr/bin/zsh")
    )
#+end_src

** toggle shell
#+BEGIN_SRC emacs-lisp
  (general-def
    :keymaps 'doom-leader-map
    "'" (if (eq system-type 'windows-nt)
            #'+eshell/toggle
          ;; #'+vterm/toggle
          #'+term/toggle
          ))
#+END_SRC

* pdf-tools
  #+BEGIN_SRC emacs-lisp
(defun yang/xdg-reopen ()
  (interactive)
  (if (buffer-file-name)
      (call-process-shell-command (concat "xdg-open " (prin1-to-string (buffer-file-name))) nil 0 nil)
    (message "No file available")))
;; copied from http://pragmaticemacs.com/emacs/even-more-pdf-tools-tweaks/
(use-package pdf-tools
  :defer t
  ;; :ensure t
  :bind (:map pdf-view-mode-map
         ("C-s" . isearch-forward))
  :config
  ;; open LaTeX pdf file in split window
  (setq pdf-sync-backward-display-action t)
  (setq pdf-sync-forward-display-action t)

  (setq-default pdf-view-display-size 'fit-page)
  ;; automatically annotate highlights
  (setq pdf-annot-activate-created-annotations t)
  ;; more fine-grained zooming
  (setq pdf-view-resize-factor 1.1)
  ;; set default annotation color
  (setq pdf-annot-default-text-annotation-properties
        '((icon . "Note")
          (color . "#ffff00")
          (label . "Sheng Yang")
          (popup-is-open)))
  (general-def
    :keymaps 'pdf-view-mode
    :states 'normal
    :prefix "SPC"
    "t b" 'pdf-history-backward
    "t f" 'pdf-history-forward)
  (add-hook 'pdf-view-mode-hook #'pdf-links-minor-mode)
  (add-hook 'pdf-view-mode-hook #'pdf-sync-minor-mode)
  (add-hook 'pdf-view-mode-hook #'pdf-annot-minor-mode)
  (add-hook 'pdf-view-mode-hook #'pdf-misc-context-menu-minor-mode)

  (general-def
    :keymaps 'pdf-view-mode-map
    :states '(override normal motion visual)
    :prefix ","
    ;; Slicing image
    "sm" #'pdf-view-set-slice-using-mouse
    "sb" #'pdf-view-set-slice-from-bounding-box
    "sr" #'pdf-view-reset-slice
    ;; Annotations
    "aD" #'pdf-annot-delete
    "at" #'pdf-annot-attachment-dired
    "ah" #'pdf-annot-add-highlight-markup-annotation
    "al" #'pdf-annot-list-annotations
    "am" #'pdf-annot-add-markup-annotation
    "ao" #'pdf-annot-add-strikeout-markup-annotation
    "as" #'pdf-annot-add-squiggly-markup-annotation
    "at" #'pdf-annot-add-text-annotation
    "au" #'pdf-annot-add-underline-markup-annotation
    ;; Fit image to window
    "fw" #'pdf-view-fit-width-to-window
    "fh" #'pdf-view-fit-height-to-window
    "fp" #'pdf-view-fit-page-to-window
    ;; Other
    "ss" #'pdf-occur
    "p" #'pdf-misc-print-document
    "O" #'pdf-outline
    "n" #'pdf-view-midnight-minor-mode)
  )
(setq pdf-view-use-unicode-ligther nil)
  #+END_SRC

* doc-view
  #+BEGIN_SRC emacs-lisp
    ;; doc-view
    (use-package doc-view
      :defer t
      :config (setq doc-view-resolution 144)
      :bind (:map doc-view-mode-map
              ("h" . image-backward-hscroll)
              ("l" . image-forward-hscroll)
              ("J" . doc-view-next-page)
              ("K" . 'doc-view-previous-page)
              )
      :config
      (add-hook 'doc-view-mode-hook 'auto-revert-mode))
  #+END_SRC
  
